// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moratsam/etherscan/txgraphapi/proto (interfaces: TxGraphClient,TxGraph_BlocksClient,TxGraph_WalletTxsClient,TxGraph_WalletsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/moratsam/etherscan/txgraphapi/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTxGraphClient is a mock of TxGraphClient interface.
type MockTxGraphClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxGraphClientMockRecorder
}

// MockTxGraphClientMockRecorder is the mock recorder for MockTxGraphClient.
type MockTxGraphClientMockRecorder struct {
	mock *MockTxGraphClient
}

// NewMockTxGraphClient creates a new mock instance.
func NewMockTxGraphClient(ctrl *gomock.Controller) *MockTxGraphClient {
	mock := &MockTxGraphClient{ctrl: ctrl}
	mock.recorder = &MockTxGraphClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxGraphClient) EXPECT() *MockTxGraphClientMockRecorder {
	return m.recorder
}

// Blocks mocks base method.
func (m *MockTxGraphClient) Blocks(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (proto.TxGraph_BlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blocks", varargs...)
	ret0, _ := ret[0].(proto.TxGraph_BlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blocks indicates an expected call of Blocks.
func (mr *MockTxGraphClientMockRecorder) Blocks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blocks", reflect.TypeOf((*MockTxGraphClient)(nil).Blocks), varargs...)
}

// InsertTxs mocks base method.
func (m *MockTxGraphClient) InsertTxs(arg0 context.Context, arg1 *proto.Txs, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertTxs", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTxs indicates an expected call of InsertTxs.
func (mr *MockTxGraphClientMockRecorder) InsertTxs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTxs", reflect.TypeOf((*MockTxGraphClient)(nil).InsertTxs), varargs...)
}

// UpsertBlock mocks base method.
func (m *MockTxGraphClient) UpsertBlock(arg0 context.Context, arg1 *proto.Block, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertBlock", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertBlock indicates an expected call of UpsertBlock.
func (mr *MockTxGraphClientMockRecorder) UpsertBlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBlock", reflect.TypeOf((*MockTxGraphClient)(nil).UpsertBlock), varargs...)
}

// UpsertWallet mocks base method.
func (m *MockTxGraphClient) UpsertWallet(arg0 context.Context, arg1 *proto.Wallet, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertWallet", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertWallet indicates an expected call of UpsertWallet.
func (mr *MockTxGraphClientMockRecorder) UpsertWallet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWallet", reflect.TypeOf((*MockTxGraphClient)(nil).UpsertWallet), varargs...)
}

// WalletTxs mocks base method.
func (m *MockTxGraphClient) WalletTxs(arg0 context.Context, arg1 *proto.Wallet, arg2 ...grpc.CallOption) (proto.TxGraph_WalletTxsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WalletTxs", varargs...)
	ret0, _ := ret[0].(proto.TxGraph_WalletTxsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletTxs indicates an expected call of WalletTxs.
func (mr *MockTxGraphClientMockRecorder) WalletTxs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletTxs", reflect.TypeOf((*MockTxGraphClient)(nil).WalletTxs), varargs...)
}

// Wallets mocks base method.
func (m *MockTxGraphClient) Wallets(arg0 context.Context, arg1 *proto.Range, arg2 ...grpc.CallOption) (proto.TxGraph_WalletsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wallets", varargs...)
	ret0, _ := ret[0].(proto.TxGraph_WalletsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallets indicates an expected call of Wallets.
func (mr *MockTxGraphClientMockRecorder) Wallets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockTxGraphClient)(nil).Wallets), varargs...)
}

// MockTxGraph_BlocksClient is a mock of TxGraph_BlocksClient interface.
type MockTxGraph_BlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxGraph_BlocksClientMockRecorder
}

// MockTxGraph_BlocksClientMockRecorder is the mock recorder for MockTxGraph_BlocksClient.
type MockTxGraph_BlocksClientMockRecorder struct {
	mock *MockTxGraph_BlocksClient
}

// NewMockTxGraph_BlocksClient creates a new mock instance.
func NewMockTxGraph_BlocksClient(ctrl *gomock.Controller) *MockTxGraph_BlocksClient {
	mock := &MockTxGraph_BlocksClient{ctrl: ctrl}
	mock.recorder = &MockTxGraph_BlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxGraph_BlocksClient) EXPECT() *MockTxGraph_BlocksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTxGraph_BlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTxGraph_BlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTxGraph_BlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTxGraph_BlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTxGraph_BlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTxGraph_BlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTxGraph_BlocksClient) Recv() (*proto.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTxGraph_BlocksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockTxGraph_BlocksClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTxGraph_BlocksClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockTxGraph_BlocksClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTxGraph_BlocksClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockTxGraph_BlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTxGraph_BlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTxGraph_BlocksClient)(nil).Trailer))
}

// MockTxGraph_WalletTxsClient is a mock of TxGraph_WalletTxsClient interface.
type MockTxGraph_WalletTxsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxGraph_WalletTxsClientMockRecorder
}

// MockTxGraph_WalletTxsClientMockRecorder is the mock recorder for MockTxGraph_WalletTxsClient.
type MockTxGraph_WalletTxsClientMockRecorder struct {
	mock *MockTxGraph_WalletTxsClient
}

// NewMockTxGraph_WalletTxsClient creates a new mock instance.
func NewMockTxGraph_WalletTxsClient(ctrl *gomock.Controller) *MockTxGraph_WalletTxsClient {
	mock := &MockTxGraph_WalletTxsClient{ctrl: ctrl}
	mock.recorder = &MockTxGraph_WalletTxsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxGraph_WalletTxsClient) EXPECT() *MockTxGraph_WalletTxsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTxGraph_WalletTxsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTxGraph_WalletTxsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTxGraph_WalletTxsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTxGraph_WalletTxsClient) Recv() (*proto.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockTxGraph_WalletTxsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockTxGraph_WalletTxsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockTxGraph_WalletTxsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTxGraph_WalletTxsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTxGraph_WalletTxsClient)(nil).Trailer))
}

// MockTxGraph_WalletsClient is a mock of TxGraph_WalletsClient interface.
type MockTxGraph_WalletsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxGraph_WalletsClientMockRecorder
}

// MockTxGraph_WalletsClientMockRecorder is the mock recorder for MockTxGraph_WalletsClient.
type MockTxGraph_WalletsClientMockRecorder struct {
	mock *MockTxGraph_WalletsClient
}

// NewMockTxGraph_WalletsClient creates a new mock instance.
func NewMockTxGraph_WalletsClient(ctrl *gomock.Controller) *MockTxGraph_WalletsClient {
	mock := &MockTxGraph_WalletsClient{ctrl: ctrl}
	mock.recorder = &MockTxGraph_WalletsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxGraph_WalletsClient) EXPECT() *MockTxGraph_WalletsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTxGraph_WalletsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTxGraph_WalletsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTxGraph_WalletsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTxGraph_WalletsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTxGraph_WalletsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTxGraph_WalletsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTxGraph_WalletsClient) Recv() (*proto.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTxGraph_WalletsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockTxGraph_WalletsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTxGraph_WalletsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockTxGraph_WalletsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTxGraph_WalletsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockTxGraph_WalletsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTxGraph_WalletsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTxGraph_WalletsClient)(nil).Trailer))
}
