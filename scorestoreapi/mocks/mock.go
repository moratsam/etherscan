// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moratsam/etherscan/scorestoreapi/proto (interfaces: ScoreStoreClient,ScoreStore_ScorersClient,ScoreStore_SearchClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/moratsam/etherscan/scorestoreapi/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockScoreStoreClient is a mock of ScoreStoreClient interface.
type MockScoreStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockScoreStoreClientMockRecorder
}

// MockScoreStoreClientMockRecorder is the mock recorder for MockScoreStoreClient.
type MockScoreStoreClientMockRecorder struct {
	mock *MockScoreStoreClient
}

// NewMockScoreStoreClient creates a new mock instance.
func NewMockScoreStoreClient(ctrl *gomock.Controller) *MockScoreStoreClient {
	mock := &MockScoreStoreClient{ctrl: ctrl}
	mock.recorder = &MockScoreStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreStoreClient) EXPECT() *MockScoreStoreClientMockRecorder {
	return m.recorder
}

// Scorers mocks base method.
func (m *MockScoreStoreClient) Scorers(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (proto.ScoreStore_ScorersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scorers", varargs...)
	ret0, _ := ret[0].(proto.ScoreStore_ScorersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scorers indicates an expected call of Scorers.
func (mr *MockScoreStoreClientMockRecorder) Scorers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scorers", reflect.TypeOf((*MockScoreStoreClient)(nil).Scorers), varargs...)
}

// Search mocks base method.
func (m *MockScoreStoreClient) Search(arg0 context.Context, arg1 *proto.Query, arg2 ...grpc.CallOption) (proto.ScoreStore_SearchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(proto.ScoreStore_SearchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockScoreStoreClientMockRecorder) Search(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockScoreStoreClient)(nil).Search), varargs...)
}

// UpsertScore mocks base method.
func (m *MockScoreStoreClient) UpsertScore(arg0 context.Context, arg1 *proto.Score, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertScore", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScore indicates an expected call of UpsertScore.
func (mr *MockScoreStoreClientMockRecorder) UpsertScore(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScore", reflect.TypeOf((*MockScoreStoreClient)(nil).UpsertScore), varargs...)
}

// UpsertScorer mocks base method.
func (m *MockScoreStoreClient) UpsertScorer(arg0 context.Context, arg1 *proto.Scorer, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertScorer", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertScorer indicates an expected call of UpsertScorer.
func (mr *MockScoreStoreClientMockRecorder) UpsertScorer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScorer", reflect.TypeOf((*MockScoreStoreClient)(nil).UpsertScorer), varargs...)
}

// MockScoreStore_ScorersClient is a mock of ScoreStore_ScorersClient interface.
type MockScoreStore_ScorersClient struct {
	ctrl     *gomock.Controller
	recorder *MockScoreStore_ScorersClientMockRecorder
}

// MockScoreStore_ScorersClientMockRecorder is the mock recorder for MockScoreStore_ScorersClient.
type MockScoreStore_ScorersClientMockRecorder struct {
	mock *MockScoreStore_ScorersClient
}

// NewMockScoreStore_ScorersClient creates a new mock instance.
func NewMockScoreStore_ScorersClient(ctrl *gomock.Controller) *MockScoreStore_ScorersClient {
	mock := &MockScoreStore_ScorersClient{ctrl: ctrl}
	mock.recorder = &MockScoreStore_ScorersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreStore_ScorersClient) EXPECT() *MockScoreStore_ScorersClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockScoreStore_ScorersClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockScoreStore_ScorersClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockScoreStore_ScorersClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockScoreStore_ScorersClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).Context))
}

// Header mocks base method.
func (m *MockScoreStore_ScorersClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockScoreStore_ScorersClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockScoreStore_ScorersClient) Recv() (*proto.Scorer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Scorer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockScoreStore_ScorersClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockScoreStore_ScorersClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockScoreStore_ScorersClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockScoreStore_ScorersClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockScoreStore_ScorersClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockScoreStore_ScorersClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockScoreStore_ScorersClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockScoreStore_ScorersClient)(nil).Trailer))
}

// MockScoreStore_SearchClient is a mock of ScoreStore_SearchClient interface.
type MockScoreStore_SearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockScoreStore_SearchClientMockRecorder
}

// MockScoreStore_SearchClientMockRecorder is the mock recorder for MockScoreStore_SearchClient.
type MockScoreStore_SearchClientMockRecorder struct {
	mock *MockScoreStore_SearchClient
}

// NewMockScoreStore_SearchClient creates a new mock instance.
func NewMockScoreStore_SearchClient(ctrl *gomock.Controller) *MockScoreStore_SearchClient {
	mock := &MockScoreStore_SearchClient{ctrl: ctrl}
	mock.recorder = &MockScoreStore_SearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreStore_SearchClient) EXPECT() *MockScoreStore_SearchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockScoreStore_SearchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockScoreStore_SearchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockScoreStore_SearchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockScoreStore_SearchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockScoreStore_SearchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockScoreStore_SearchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockScoreStore_SearchClient) Recv() (*proto.Score, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Score)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockScoreStore_SearchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockScoreStore_SearchClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockScoreStore_SearchClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockScoreStore_SearchClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockScoreStore_SearchClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockScoreStore_SearchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockScoreStore_SearchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockScoreStore_SearchClient)(nil).Trailer))
}
