// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: txgraphapi/proto/api.proto

package proto

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Tx_TxStatus int32

const (
	Tx_Fail    Tx_TxStatus = 0
	Tx_Success Tx_TxStatus = 1
	Tx_Unknown Tx_TxStatus = 2
)

var Tx_TxStatus_name = map[int32]string{
	0: "Fail",
	1: "Success",
	2: "Unknown",
}

var Tx_TxStatus_value = map[string]int32{
	"Fail":    0,
	"Success": 1,
	"Unknown": 2,
}

func (x Tx_TxStatus) String() string {
	return proto.EnumName(Tx_TxStatus_name, int32(x))
}

func (Tx_TxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{1, 0}
}

// Describes a block in the txgraph.
type Block struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Processed            bool     `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

// Describes a transaction in the txgraph.
type Tx struct {
	Hash                 string           `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Status               Tx_TxStatus      `protobuf:"varint,2,opt,name=Status,proto3,enum=proto.Tx_TxStatus" json:"Status,omitempty"`
	Block                string           `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	From                 string           `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                   string           `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value                string           `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	TransactionFee       string           `protobuf:"bytes,8,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	Data                 []byte           `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{1}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Tx) GetStatus() Tx_TxStatus {
	if m != nil {
		return m.Status
	}
	return Tx_Fail
}

func (m *Tx) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *Tx) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Tx) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Tx) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Tx) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Tx) GetTransactionFee() string {
	if m != nil {
		return m.TransactionFee
	}
	return ""
}

func (m *Tx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxBatch struct {
	Txs                  []*Tx    `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxBatch) Reset()         { *m = TxBatch{} }
func (m *TxBatch) String() string { return proto.CompactTextString(m) }
func (*TxBatch) ProtoMessage()    {}
func (*TxBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{2}
}
func (m *TxBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxBatch.Merge(m, src)
}
func (m *TxBatch) XXX_Size() int {
	return m.Size()
}
func (m *TxBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_TxBatch.DiscardUnknown(m)
}

var xxx_messageInfo_TxBatch proto.InternalMessageInfo

func (m *TxBatch) GetTxs() []*Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

// Describes a wallet in the txgraph.
type Wallet struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{3}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type WalletBatch struct {
	Wallets              []*Wallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *WalletBatch) Reset()         { *m = WalletBatch{} }
func (m *WalletBatch) String() string { return proto.CompactTextString(m) }
func (*WalletBatch) ProtoMessage()    {}
func (*WalletBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{4}
}
func (m *WalletBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletBatch.Merge(m, src)
}
func (m *WalletBatch) XXX_Size() int {
	return m.Size()
}
func (m *WalletBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletBatch.DiscardUnknown(m)
}

var xxx_messageInfo_WalletBatch proto.InternalMessageInfo

func (m *WalletBatch) GetWallets() []*Wallet {
	if m != nil {
		return m.Wallets
	}
	return nil
}

// Specifies the [fromAddress, toAddress) range to use when calling Wallets.
type Range struct {
	FromAddress          string   `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress            string   `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd11585dd0bdc80, []int{5}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.Size()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Range) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.Tx_TxStatus", Tx_TxStatus_name, Tx_TxStatus_value)
	proto.RegisterType((*Block)(nil), "proto.Block")
	proto.RegisterType((*Tx)(nil), "proto.Tx")
	proto.RegisterType((*TxBatch)(nil), "proto.TxBatch")
	proto.RegisterType((*Wallet)(nil), "proto.Wallet")
	proto.RegisterType((*WalletBatch)(nil), "proto.WalletBatch")
	proto.RegisterType((*Range)(nil), "proto.Range")
}

func init() { proto.RegisterFile("txgraphapi/proto/api.proto", fileDescriptor_1dd11585dd0bdc80) }

var fileDescriptor_1dd11585dd0bdc80 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0xba, 0xb5, 0x1d, 0x8f, 0xdb, 0x10, 0x8d, 0x50, 0x65, 0xb9, 0x28, 0x58, 0x3e, 0x50,
	0x8b, 0x83, 0x1b, 0xa5, 0x12, 0x42, 0x42, 0x1c, 0xa8, 0x44, 0x2b, 0xae, 0xae, 0x2b, 0x8e, 0x68,
	0x93, 0x6c, 0x93, 0xa8, 0x8e, 0xd7, 0xf2, 0x6e, 0xa8, 0xf9, 0x13, 0x7e, 0x84, 0x13, 0x3f, 0xc0,
	0x91, 0x4f, 0x40, 0xe1, 0x47, 0xd0, 0xee, 0xc6, 0x49, 0x03, 0x2a, 0x27, 0xef, 0xcc, 0x7b, 0xf3,
	0x66, 0xe6, 0x79, 0x20, 0x94, 0xcd, 0xb4, 0xa6, 0xd5, 0x8c, 0x56, 0xf3, 0xb3, 0xaa, 0xe6, 0x92,
	0x9f, 0xd1, 0x6a, 0x9e, 0xea, 0x17, 0xda, 0xfa, 0x13, 0x3e, 0x9f, 0x72, 0x3e, 0x2d, 0x98, 0x81,
	0x47, 0xcb, 0xdb, 0x33, 0x39, 0x5f, 0x30, 0x21, 0xe9, 0xa2, 0x32, 0xbc, 0xf0, 0xe4, 0x6f, 0x02,
	0x5b, 0x54, 0xf2, 0x8b, 0x01, 0xe3, 0xb7, 0x60, 0x5f, 0x14, 0x7c, 0x7c, 0x87, 0xc7, 0xe0, 0x94,
	0xcb, 0xc5, 0x88, 0xd5, 0x01, 0x89, 0x48, 0x62, 0x67, 0xeb, 0x08, 0x9f, 0x81, 0x57, 0xd5, 0x7c,
	0xcc, 0x84, 0x60, 0x93, 0xc0, 0x8a, 0x48, 0xd2, 0xc9, 0xb6, 0x89, 0xf8, 0xbb, 0x05, 0x56, 0xde,
	0x20, 0xc2, 0xc1, 0x8c, 0x8a, 0x99, 0x2e, 0xf5, 0x32, 0xfd, 0xc6, 0x97, 0xe0, 0x5c, 0x4b, 0x2a,
	0x97, 0x42, 0x57, 0x75, 0x87, 0x68, 0x3a, 0xa6, 0x79, 0x93, 0xe6, 0x8d, 0x41, 0xb2, 0x35, 0x03,
	0x9f, 0x82, 0x3d, 0x52, 0x53, 0x04, 0xfb, 0x5a, 0xc0, 0x04, 0xf8, 0x1a, 0xbc, 0xcd, 0x2e, 0xc1,
	0x41, 0x44, 0x12, 0x7f, 0x18, 0xa6, 0x66, 0x99, 0xb4, 0x5d, 0x26, 0xcd, 0x5b, 0x46, 0xb6, 0x25,
	0xab, 0x79, 0x6e, 0x6b, 0xbe, 0x08, 0x6c, 0x33, 0x8f, 0x7a, 0x63, 0x17, 0x2c, 0xc9, 0x03, 0x47,
	0x67, 0x2c, 0xc9, 0x55, 0xcf, 0xcf, 0xb4, 0x58, 0xb2, 0xc0, 0x35, 0x3d, 0x75, 0x80, 0xa7, 0xf0,
	0x44, 0xd6, 0xb4, 0x14, 0x74, 0x2c, 0xe7, 0xbc, 0xfc, 0x74, 0xcb, 0x58, 0xd0, 0xd1, 0x78, 0xf7,
	0x41, 0xfa, 0x92, 0x31, 0xd5, 0x62, 0x42, 0x25, 0x0d, 0xbc, 0x88, 0x24, 0x87, 0x99, 0x7e, 0xc7,
	0x29, 0x74, 0xda, 0xd5, 0xb0, 0x03, 0x07, 0x97, 0x74, 0x5e, 0xf4, 0xf6, 0xd0, 0x07, 0xf7, 0x7a,
	0x39, 0x56, 0x86, 0xf5, 0x88, 0x0a, 0x6e, 0xca, 0xbb, 0x92, 0xdf, 0x97, 0x3d, 0x2b, 0x7e, 0x01,
	0x6e, 0xde, 0x5c, 0x50, 0x39, 0x9e, 0xe1, 0x09, 0xec, 0xcb, 0x46, 0x04, 0x24, 0xda, 0x4f, 0xfc,
	0xa1, 0xb7, 0xb1, 0x2a, 0x53, 0xd9, 0x38, 0x06, 0xe7, 0x23, 0x2d, 0x0a, 0x26, 0x31, 0x00, 0x97,
	0x4e, 0x26, 0x35, 0x13, 0x62, 0xed, 0x75, 0x1b, 0xc6, 0xaf, 0xc0, 0x37, 0x1c, 0xa3, 0x77, 0x0a,
	0xee, 0xbd, 0x0e, 0x5b, 0xcd, 0xa3, 0xb5, 0xa6, 0x21, 0x65, 0x2d, 0x1a, 0x5f, 0x81, 0x9d, 0xd1,
	0x72, 0xca, 0x30, 0x02, 0x5f, 0xf9, 0xf4, 0x6e, 0x47, 0xfe, 0x61, 0x4a, 0x9d, 0x82, 0xe4, 0x2d,
	0x6e, 0x69, 0x7c, 0x9b, 0x18, 0x7e, 0xb3, 0xd4, 0x36, 0x57, 0xea, 0x5a, 0x71, 0x00, 0x8e, 0xbe,
	0x2a, 0x81, 0xc7, 0xff, 0xfc, 0xb0, 0xf7, 0xea, 0xfa, 0xc2, 0xc3, 0xf5, 0x38, 0x9a, 0x36, 0x20,
	0x78, 0x0e, 0xfe, 0x4d, 0x25, 0x58, 0x2d, 0xcd, 0x35, 0xee, 0xc0, 0xe1, 0x23, 0x22, 0x78, 0x0e,
	0xde, 0x87, 0x52, 0x15, 0xe5, 0x8d, 0xc0, 0xee, 0xc6, 0x34, 0xed, 0xc0, 0xa3, 0x45, 0x6f, 0xe0,
	0xc8, 0x74, 0x32, 0x4e, 0x08, 0xc4, 0x1d, 0x67, 0xfe, 0x5f, 0x7c, 0x0a, 0x9e, 0xa1, 0xa9, 0x8e,
	0xbb, 0x96, 0x86, 0xdb, 0xbf, 0x36, 0x20, 0x98, 0x80, 0xdb, 0xea, 0xb7, 0xbb, 0x68, 0x9b, 0xc3,
	0xdd, 0xa2, 0x01, 0xb9, 0xe8, 0xfd, 0x58, 0xf5, 0xc9, 0xcf, 0x55, 0x9f, 0xfc, 0x5a, 0xf5, 0xc9,
	0xd7, 0xdf, 0xfd, 0xbd, 0x91, 0xa3, 0x19, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xa2,
	0xcb, 0x6b, 0xfd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TxGraphClient is the client API for TxGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TxGraphClient interface {
	// Streams unprocessed blocks.
	Blocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TxGraph_BlocksClient, error)
	// Upserts a block.
	UpsertBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Inserts the transactions.
	InsertTxs(ctx context.Context, in *TxBatch, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Upserts a wallet.
	UpsertWallets(ctx context.Context, in *WalletBatch, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Streams all transactions connected to a wallet.
	WalletTxs(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (TxGraph_WalletTxsClient, error)
	// Streams all wallets in the specified range.
	Wallets(ctx context.Context, in *Range, opts ...grpc.CallOption) (TxGraph_WalletsClient, error)
}

type txGraphClient struct {
	cc *grpc.ClientConn
}

func NewTxGraphClient(cc *grpc.ClientConn) TxGraphClient {
	return &txGraphClient{cc}
}

func (c *txGraphClient) Blocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TxGraph_BlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TxGraph_serviceDesc.Streams[0], "/proto.TxGraph/Blocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &txGraphBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TxGraph_BlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type txGraphBlocksClient struct {
	grpc.ClientStream
}

func (x *txGraphBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *txGraphClient) UpsertBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.TxGraph/UpsertBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txGraphClient) InsertTxs(ctx context.Context, in *TxBatch, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.TxGraph/InsertTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txGraphClient) UpsertWallets(ctx context.Context, in *WalletBatch, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.TxGraph/UpsertWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txGraphClient) WalletTxs(ctx context.Context, in *Wallet, opts ...grpc.CallOption) (TxGraph_WalletTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TxGraph_serviceDesc.Streams[1], "/proto.TxGraph/WalletTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &txGraphWalletTxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TxGraph_WalletTxsClient interface {
	Recv() (*Tx, error)
	grpc.ClientStream
}

type txGraphWalletTxsClient struct {
	grpc.ClientStream
}

func (x *txGraphWalletTxsClient) Recv() (*Tx, error) {
	m := new(Tx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *txGraphClient) Wallets(ctx context.Context, in *Range, opts ...grpc.CallOption) (TxGraph_WalletsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TxGraph_serviceDesc.Streams[2], "/proto.TxGraph/Wallets", opts...)
	if err != nil {
		return nil, err
	}
	x := &txGraphWalletsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TxGraph_WalletsClient interface {
	Recv() (*Wallet, error)
	grpc.ClientStream
}

type txGraphWalletsClient struct {
	grpc.ClientStream
}

func (x *txGraphWalletsClient) Recv() (*Wallet, error) {
	m := new(Wallet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TxGraphServer is the server API for TxGraph service.
type TxGraphServer interface {
	// Streams unprocessed blocks.
	Blocks(*emptypb.Empty, TxGraph_BlocksServer) error
	// Upserts a block.
	UpsertBlock(context.Context, *Block) (*emptypb.Empty, error)
	// Inserts the transactions.
	InsertTxs(context.Context, *TxBatch) (*emptypb.Empty, error)
	// Upserts a wallet.
	UpsertWallets(context.Context, *WalletBatch) (*emptypb.Empty, error)
	// Streams all transactions connected to a wallet.
	WalletTxs(*Wallet, TxGraph_WalletTxsServer) error
	// Streams all wallets in the specified range.
	Wallets(*Range, TxGraph_WalletsServer) error
}

// UnimplementedTxGraphServer can be embedded to have forward compatible implementations.
type UnimplementedTxGraphServer struct {
}

func (*UnimplementedTxGraphServer) Blocks(req *emptypb.Empty, srv TxGraph_BlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}
func (*UnimplementedTxGraphServer) UpsertBlock(ctx context.Context, req *Block) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBlock not implemented")
}
func (*UnimplementedTxGraphServer) InsertTxs(ctx context.Context, req *TxBatch) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTxs not implemented")
}
func (*UnimplementedTxGraphServer) UpsertWallets(ctx context.Context, req *WalletBatch) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWallets not implemented")
}
func (*UnimplementedTxGraphServer) WalletTxs(req *Wallet, srv TxGraph_WalletTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method WalletTxs not implemented")
}
func (*UnimplementedTxGraphServer) Wallets(req *Range, srv TxGraph_WalletsServer) error {
	return status.Errorf(codes.Unimplemented, "method Wallets not implemented")
}

func RegisterTxGraphServer(s *grpc.Server, srv TxGraphServer) {
	s.RegisterService(&_TxGraph_serviceDesc, srv)
}

func _TxGraph_Blocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxGraphServer).Blocks(m, &txGraphBlocksServer{stream})
}

type TxGraph_BlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type txGraphBlocksServer struct {
	grpc.ServerStream
}

func (x *txGraphBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func _TxGraph_UpsertBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxGraphServer).UpsertBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TxGraph/UpsertBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxGraphServer).UpsertBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxGraph_InsertTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxGraphServer).InsertTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TxGraph/InsertTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxGraphServer).InsertTxs(ctx, req.(*TxBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxGraph_UpsertWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxGraphServer).UpsertWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TxGraph/UpsertWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxGraphServer).UpsertWallets(ctx, req.(*WalletBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TxGraph_WalletTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Wallet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxGraphServer).WalletTxs(m, &txGraphWalletTxsServer{stream})
}

type TxGraph_WalletTxsServer interface {
	Send(*Tx) error
	grpc.ServerStream
}

type txGraphWalletTxsServer struct {
	grpc.ServerStream
}

func (x *txGraphWalletTxsServer) Send(m *Tx) error {
	return x.ServerStream.SendMsg(m)
}

func _TxGraph_Wallets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxGraphServer).Wallets(m, &txGraphWalletsServer{stream})
}

type TxGraph_WalletsServer interface {
	Send(*Wallet) error
	grpc.ServerStream
}

type txGraphWalletsServer struct {
	grpc.ServerStream
}

func (x *txGraphWalletsServer) Send(m *Wallet) error {
	return x.ServerStream.SendMsg(m)
}

var _TxGraph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TxGraph",
	HandlerType: (*TxGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertBlock",
			Handler:    _TxGraph_UpsertBlock_Handler,
		},
		{
			MethodName: "InsertTxs",
			Handler:    _TxGraph_InsertTxs_Handler,
		},
		{
			MethodName: "UpsertWallets",
			Handler:    _TxGraph_UpsertWallets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Blocks",
			Handler:       _TxGraph_Blocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WalletTxs",
			Handler:       _TxGraph_WalletTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Wallets",
			Handler:       _TxGraph_Wallets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "txgraphapi/proto/api.proto",
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Processed {
		i--
		if m.Processed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Number != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactionFee) > 0 {
		i -= len(m.TransactionFee)
		copy(dAtA[i:], m.TransactionFee)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TransactionFee)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintApi(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	if m.Processed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TransactionFee)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WalletBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Wallets) > 0 {
		for _, e := range m.Wallets {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Tx_TxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &Tx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, &Wallet{})
			if err := m.Wallets[len(m.Wallets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
