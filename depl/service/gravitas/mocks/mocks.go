// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moratsam/etherscan/depl/service/gravitas (interfaces: GraphAPI,ScoreScoreAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scorestore "github.com/moratsam/etherscan/scorestore"
	graph "github.com/moratsam/etherscan/txgraph/graph"
)

// MockGraphAPI is a mock of GraphAPI interface.
type MockGraphAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGraphAPIMockRecorder
}

// MockGraphAPIMockRecorder is the mock recorder for MockGraphAPI.
type MockGraphAPIMockRecorder struct {
	mock *MockGraphAPI
}

// NewMockGraphAPI creates a new mock instance.
func NewMockGraphAPI(ctrl *gomock.Controller) *MockGraphAPI {
	mock := &MockGraphAPI{ctrl: ctrl}
	mock.recorder = &MockGraphAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphAPI) EXPECT() *MockGraphAPIMockRecorder {
	return m.recorder
}

// WalletTxs mocks base method.
func (m *MockGraphAPI) WalletTxs(arg0 string) (graph.TxIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletTxs", arg0)
	ret0, _ := ret[0].(graph.TxIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletTxs indicates an expected call of WalletTxs.
func (mr *MockGraphAPIMockRecorder) WalletTxs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletTxs", reflect.TypeOf((*MockGraphAPI)(nil).WalletTxs), arg0)
}

// Wallets mocks base method.
func (m *MockGraphAPI) Wallets(arg0, arg1 string) (graph.WalletIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets", arg0, arg1)
	ret0, _ := ret[0].(graph.WalletIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallets indicates an expected call of Wallets.
func (mr *MockGraphAPIMockRecorder) Wallets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockGraphAPI)(nil).Wallets), arg0, arg1)
}

// MockScoreScoreAPI is a mock of ScoreScoreAPI interface.
type MockScoreScoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockScoreScoreAPIMockRecorder
}

// MockScoreScoreAPIMockRecorder is the mock recorder for MockScoreScoreAPI.
type MockScoreScoreAPIMockRecorder struct {
	mock *MockScoreScoreAPI
}

// NewMockScoreScoreAPI creates a new mock instance.
func NewMockScoreScoreAPI(ctrl *gomock.Controller) *MockScoreScoreAPI {
	mock := &MockScoreScoreAPI{ctrl: ctrl}
	mock.recorder = &MockScoreScoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreScoreAPI) EXPECT() *MockScoreScoreAPIMockRecorder {
	return m.recorder
}

// UpsertScore mocks base method.
func (m *MockScoreScoreAPI) UpsertScore(arg0 *scorestore.Score) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertScore indicates an expected call of UpsertScore.
func (mr *MockScoreScoreAPIMockRecorder) UpsertScore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScore", reflect.TypeOf((*MockScoreScoreAPI)(nil).UpsertScore), arg0)
}

// UpsertScorer mocks base method.
func (m *MockScoreScoreAPI) UpsertScorer(arg0 *scorestore.Scorer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScorer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertScorer indicates an expected call of UpsertScorer.
func (mr *MockScoreScoreAPIMockRecorder) UpsertScorer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScorer", reflect.TypeOf((*MockScoreScoreAPI)(nil).UpsertScorer), arg0)
}
