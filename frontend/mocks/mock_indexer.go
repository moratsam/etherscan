// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moratsam/etherscan/scorestore (interfaces: ScoreIterator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scorestore "github.com/moratsam/etherscan/scorestore"
)

// MockScoreIterator is a mock of ScoreIterator interface.
type MockScoreIterator struct {
	ctrl     *gomock.Controller
	recorder *MockScoreIteratorMockRecorder
}

// MockScoreIteratorMockRecorder is the mock recorder for MockScoreIterator.
type MockScoreIteratorMockRecorder struct {
	mock *MockScoreIterator
}

// NewMockScoreIterator creates a new mock instance.
func NewMockScoreIterator(ctrl *gomock.Controller) *MockScoreIterator {
	mock := &MockScoreIterator{ctrl: ctrl}
	mock.recorder = &MockScoreIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreIterator) EXPECT() *MockScoreIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScoreIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScoreIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScoreIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockScoreIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockScoreIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockScoreIterator)(nil).Error))
}

// Next mocks base method.
func (m *MockScoreIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockScoreIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockScoreIterator)(nil).Next))
}

// Score mocks base method.
func (m *MockScoreIterator) Score() *scorestore.Score {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Score")
	ret0, _ := ret[0].(*scorestore.Score)
	return ret0
}

// Score indicates an expected call of Score.
func (mr *MockScoreIteratorMockRecorder) Score() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockScoreIterator)(nil).Score))
}

// TotalCount mocks base method.
func (m *MockScoreIterator) TotalCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// TotalCount indicates an expected call of TotalCount.
func (mr *MockScoreIteratorMockRecorder) TotalCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalCount", reflect.TypeOf((*MockScoreIterator)(nil).TotalCount))
}
