// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moratsam/etherscan/txgraph/graph (interfaces: TxIterator,WalletIterator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	graph "github.com/moratsam/etherscan/txgraph/graph"
)

// MockTxIterator is a mock of TxIterator interface.
type MockTxIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTxIteratorMockRecorder
}

// MockTxIteratorMockRecorder is the mock recorder for MockTxIterator.
type MockTxIteratorMockRecorder struct {
	mock *MockTxIterator
}

// NewMockTxIterator creates a new mock instance.
func NewMockTxIterator(ctrl *gomock.Controller) *MockTxIterator {
	mock := &MockTxIterator{ctrl: ctrl}
	mock.recorder = &MockTxIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxIterator) EXPECT() *MockTxIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTxIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTxIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockTxIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTxIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTxIterator)(nil).Error))
}

// Next mocks base method.
func (m *MockTxIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockTxIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTxIterator)(nil).Next))
}

// Tx mocks base method.
func (m *MockTxIterator) Tx() *graph.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*graph.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockTxIteratorMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockTxIterator)(nil).Tx))
}

// MockWalletIterator is a mock of WalletIterator interface.
type MockWalletIterator struct {
	ctrl     *gomock.Controller
	recorder *MockWalletIteratorMockRecorder
}

// MockWalletIteratorMockRecorder is the mock recorder for MockWalletIterator.
type MockWalletIteratorMockRecorder struct {
	mock *MockWalletIterator
}

// NewMockWalletIterator creates a new mock instance.
func NewMockWalletIterator(ctrl *gomock.Controller) *MockWalletIterator {
	mock := &MockWalletIterator{ctrl: ctrl}
	mock.recorder = &MockWalletIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletIterator) EXPECT() *MockWalletIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWalletIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWalletIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWalletIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockWalletIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockWalletIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockWalletIterator)(nil).Error))
}

// Next mocks base method.
func (m *MockWalletIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockWalletIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockWalletIterator)(nil).Next))
}

// Wallet mocks base method.
func (m *MockWalletIterator) Wallet() *graph.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallet")
	ret0, _ := ret[0].(*graph.Wallet)
	return ret0
}

// Wallet indicates an expected call of Wallet.
func (mr *MockWalletIteratorMockRecorder) Wallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallet", reflect.TypeOf((*MockWalletIterator)(nil).Wallet))
}
